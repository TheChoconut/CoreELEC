diff --git a/CMakeLists.txt b/CMakeLists.txt
index 603292e..63c09d5 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -19,6 +19,7 @@ option(USE_BACKEND_REALTEK "Whether to enable support for Realtek's Wayland EGL
 option(USE_BACKEND_VIV_IMX6_EGL "Whether to enable support for NXP's IMX6 EGL WPE backend" OFF)
 option(USE_BACKEND_WPEFRAMEWORK "WPEFramework abstraction layer is used as WPE backend" OFF)
 option(USE_BACKEND_ESSOS "Whether to enable support for the Essos WPE backend" OFF)
+option(USE_BACKEND_AML "Whether to enable support for the AML backend" OFF)
 
 option(USE_PLATFORM_BROADCOM "Whether the playback is based on Broadcom plugins" OFF)
 option(USE_BACKEND_WESTEROS_MESA "Whether to enable support for the gbm based offscreen target for westeros Mesa only" OFF)
@@ -141,6 +142,10 @@ if (USE_BACKEND_ESSOS)
     include(src/essos/CMakeLists.txt)
 endif ()
 
+if (USE_BACKEND_AML)
+    include(src/amlogic/CMakeLists.txt)
+endif ()
+
 add_library(WPEBackend-rdk SHARED ${WPE_PLATFORM_SOURCES})
 target_include_directories(WPEBackend-rdk PRIVATE ${WPE_PLATFORM_INCLUDE_DIRECTORIES})
 target_link_libraries(WPEBackend-rdk ${WPE_PLATFORM_LIBRARIES})
diff --git a/src/amlogic/CMakeLists.txt b/src/amlogic/CMakeLists.txt
new file mode 100644
index 0000000..55b0605
--- /dev/null
+++ b/src/amlogic/CMakeLists.txt
@@ -0,0 +1,17 @@
+find_package(EGL REQUIRED)
+
+add_definitions(-DBACKEND_AML=1)
+
+list(APPEND WPE_PLATFORM_INCLUDE_DIRECTORIES
+    ${EGL_INCLUDE_DIRS}
+)
+
+list(APPEND WPE_PLATFORM_LIBRARIES
+    ${EGL_LIBRARIES}
+)
+
+list(APPEND WPE_PLATFORM_SOURCES
+    src/amlogic/cursor-data.cpp
+    src/amlogic/renderer-backend.cpp
+    src/amlogic/view-backend.cpp
+)
diff --git a/src/amlogic/cursor-data.cpp b/src/amlogic/cursor-data.cpp
new file mode 100644
index 0000000..081cf60
--- /dev/null
+++ b/src/amlogic/cursor-data.cpp
@@ -0,0 +1,326 @@
+/*
+ * Copyright (C) 2015, 2016 Igalia S.L.
+ * Copyright (C) 2015, 2016 Metrological
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include "cursor-data.h"
+
+namespace AML {
+
+uint8_t CursorData::data[CursorData::width * CursorData::height * 4 + 1] = {
+  "\374\374\374\275\0\0\0\14\0\0\0\12\0\0\0\5\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\362\362\362\272\0\0\0"
+  "\35\0\0\0\20\0\0\0\6\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\377\377\377\377\377\377\377\377\343\343\343\273\0\0\0&\0\0\0\22\0\0"
+  "\0\6\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377"
+  "\377\377\377\377\377\377\377\331\331\331\267\0\0\0(\0\0\0\22\0\0\0\6\0\0"
+  "\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\377"
+  "\377\377\377\377\377\377\377\323\323\323\260\0\0\0(\0\0\0\21\0\0\0\5\0\0"
+  "\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\200\200\200"
+  "\377\377\377\377\377\377\377\377\377\314\314\314\247\0\0\0&\0\0\0\20\0\0"
+  "\0\5\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\22\22\22\377"
+  "\213\213\213\377\377\377\377\377\377\377\377\377\305\305\305\240\0\0\0%\0"
+  "\0\0\20\0\0\0\5\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\17\17\17\377"
+  "\25\25\25\377\226\226\226\377\377\377\377\377\376\376\376\377\276\276\276"
+  "\226\0\0\0%\0\0\0\20\0\0\0\5\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\14\14"
+  "\14\377\23\23\23\377\31\31\31\377\240\240\240\377\377\377\377\377\376\376"
+  "\376\377\265\265\265\216\0\0\0#\0\0\0\16\0\0\0\4\0\0\0\1\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377"
+  "\377\377\12\12\12\377\20\20\20\377\26\26\26\377\36\36\36\377\252\252\252"
+  "\377\377\377\377\377\377\377\377\376\260\260\260\205\0\0\0\"\0\0\0\16\0\0"
+  "\0\4\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377"
+  "\377\377\377\377\377\377\377\7\7\7\377\15\15\15\377\24\24\24\377\32\32\32"
+  "\377\"\"\"\377\262\262\262\377\377\377\377\377\375\375\375\376\244\244\244"
+  "|\0\0\0!\0\0\0\15\0\0\0\4\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\377\377\377\377\377\377\377\377\4\4\4\377\13\13\13\377\21\21\21"
+  "\377\27\27\27\377\35\35\35\377'''\377\273\273\273\377\377\377\377\377\375"
+  "\375\375\376\234\234\234u\0\0\0\40\0\0\0\15\0\0\0\4\0\0\0\1\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\2\2\2\377\10\10"
+  "\10\377\16\16\16\377\25\25\25\377\33\33\33\377!!!\377,,,\377\302\302\302"
+  "\377\377\377\377\377\375\375\375\375\222\222\222l\0\0\0\37\0\0\0\14\0\0\0"
+  "\4\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377"
+  "\0\0\0\377\5\5\5\377\14\14\14\377\22\22\22\377\30\30\30\377\36\36\36\377"
+  "%%%\377222\377\312\312\312\377\377\377\377\377\375\375\375\374\207\207\207"
+  "d\0\0\0\37\0\0\0\14\0\0\0\4\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377"
+  "\377\377\377\377\0\0\0\377\3\3\3\377\11\11\11\377\17\17\17\377\26\26\26\377"
+  "\34\34\34\377\"\"\"\377(((\377888\377\320\320\320\377\377\377\377\377\374"
+  "\374\374\373|||^\0\0\0\35\0\0\0\13\0\0\0\4\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377"
+  "\377\377\377\377\377\377\0\0\0\377\0\0\0\377\6\6\6\377\15\15\15\377\23\23"
+  "\23\377\31\31\31\377\37\37\37\377&&&\377,,,\377===\377\326\326\326\377\377"
+  "\377\377\377\374\374\374\372oooW\0\0\0\34\0\0\0\13\0\0\0\3\0\0\0\1\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\4\4\4\377\12\12\12"
+  "\377\20\20\20\377\26\26\26\377\35\35\35\377###\377)))\377000\377DDD\377\334"
+  "\334\334\377\377\377\377\377\373\373\373\371bbbP\0\0\0\34\0\0\0\12\0\0\0"
+  "\3\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\1\1\1\377"
+  "\7\7\7\377\16\16\16\377\24\24\24\377\32\32\32\377\40\40\40\377'''\377---"
+  "\377333\377JJJ\377\341\341\341\377\377\377\377\377\372\372\372\367PPPI\0"
+  "\0\0\32\0\0\0\12\0\0\0\3\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0"
+  "\377\0\0\0\377\5\5\5\377\13\13\13\377\21\21\21\377\27\27\27\377\36\36\36"
+  "\377$$$\377***\377000\377777\377QQQ\377\346\346\346\377\377\377\377\377\370"
+  "\370\370\365DDDC\0\0\0\32\0\0\0\12\0\0\0\2\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\0\0\0"
+  "\377\0\0\0\377\0\0\0\377\2\2\2\377\10\10\10\377\17\17\17\377\25\25\25\377"
+  "\33\33\33\377!!!\377(((\377...\377444\377:::\377XXX\377\352\352\352\377\377"
+  "\377\377\377\370\370\370\362888?\0\0\0\31\0\0\0\11\0\0\0\2\0\0\0\1\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377"
+  "\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\6\6\6\377\14\14\14\377\22\22\22"
+  "\377\30\30\30\377\37\37\37\377%%%\377+++\377111\377888\377>>>\377___\377"
+  "\355\355\355\377\377\377\377\377\366\366\366\357+++;\0\0\0\30\0\0\0\10\0"
+  "\0\0\2\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377"
+  "\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\3\3\3\377\11\11\11\377"
+  "\17\17\17\377\26\26\26\377\34\34\34\377\"\"\"\377)))\377///\377555\377;;"
+  ";\377BBB\377fff\377\361\361\361\377\377\377\377\377\365\365\365\353\34\34"
+  "\34""6\0\0\0\27\0\0\0\10\0\0\0\2\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377"
+  "\0\0\0\377\7\7\7\377\15\15\15\377\23\23\23\377\31\31\31\377\40\40\40\377"
+  "&&&\377,,,\377222\377999\377???\377EEE\377jjj\377\364\364\364\377\377\377"
+  "\377\377\361\361\361\350\12\12\12""3\0\0\0\27\0\0\0\10\0\0\0\2\0\0\0\1\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377"
+  "\0\0\0\377\0\0\0\377\0\0\0\377\4\4\4\377\12\12\12\377\20\20\20\377\27\27"
+  "\27\377\35\35\35\377###\377***\377000\377666\377<<<\377CCC\377HHH\377ooo"
+  "\377\366\366\366\377\377\377\377\377\357\357\357\343\0\0\0/\0\0\0\26\0\0"
+  "\0\7\0\0\0\2\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\0\0"
+  "\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\1\1\1\377\10\10\10\377\16"
+  "\16\16\377\24\24\24\377\"\"\"\377\336\336\336\377\354\354\354\377\354\354"
+  "\354\377\355\355\355\377\355\355\355\377\356\356\356\377\356\356\356\377"
+  "\356\356\356\377\371\371\371\377\377\377\377\377\377\377\377\377\355\355"
+  "\355\334\0\0\0,\0\0\0\23\0\0\0\6\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377"
+  "\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0\377\0\0\0"
+  "\377\5\5\5\377\13\13\13\377\21\21\21\377\30\30\30\377\231\231\231\377\377"
+  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
+  "\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
+  "\377\377\377\377\377\377\377\356\356\356\323\0\0\0\"\0\0\0\15\0\0\0\3\0\0"
+  "\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377"
+  "\0\0\0\377\0\0\0\377\0\0\0\377@@@\377\11\11\11\377\17\17\17\377\25\25\25"
+  "\377222\377\372\372\372\377\377\377\377\377\215\215\215\274MMM\227SSS\215"
+  "VVV\207WWW\206WWW\206XXX\205[[[\200bbbwuuud\14\14\14(\0\0\0\20\0\0\0\4\0"
+  "\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0"
+  "\377\0\0\0\377\0\0\0\377iii\377\376\376\376\377AAA\377\14\14\14\377\22\22"
+  "\22\377\31\31\31\377\250\250\250\377\377\377\377\377\347\347\347\353\0\0"
+  "\0k\0\0\0Q\0\0\0A\0\0\0=\0\0\0;\0\0\0;\0\0\0:\0\0\0""5\0\0\0+\0\0\0\33\0"
+  "\0\0\14\0\0\0\4\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\0\0\0\377"
+  "\0\0\0\377\0\0\0\377\0\0\0\377ooo\377\377\377\377\377\377\377\377\377\272"
+  "\272\272\377\12\12\12\377\20\20\20\377\26\26\26\377>>>\377\375\375\375\377"
+  "\376\376\376\377YYY}\0\0\0<\0\0\0#\0\0\0\30\0\0\0\26\0\0\0\26\0\0\0\25\0"
+  "\0\0\24\0\0\0\21\0\0\0\13\0\0\0\5\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377"
+  "\377\377\377\377\0\0\0\377\0\0\0\377\0\0\0\377ttt\377\377\377\377\377\377"
+  "\377\377\377\377\377\377\377\377\377\377\377<<<\377\15\15\15\377\23\23\23"
+  "\377\32\32\32\377\266\266\266\377\377\377\377\377\344\344\344\336\0\0\0?"
+  "\0\0\0\34\0\0\0\13\0\0\0\6\0\0\0\5\0\0\0\5\0\0\0\4\0\0\0\4\0\0\0\2\0\0\0"
+  "\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\0\0\0\377\0\0"
+  "\0\377zzz\377\377\377\377\377\377\377\377\377\301\301\301\325\335\335\335"
+  "\343\377\377\377\377\264\264\264\377\12\12\12\377\21\21\21\377\27\27\27\377"
+  "KKK\377\377\377\377\377\376\376\376\377EEEc\0\0\0'\0\0\0\15\0\0\0\3\0\0\0"
+  "\1\0\0\0\1\0\0\0\1\0\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377"
+  "\377\377\377\377\377\377\0\0\0\377\177\177\177\377\377\377\377\377\377\377"
+  "\377\377\276\276\276\317\0\0\0sLLL{\376\376\376\377\377\377\377\377777\377"
+  "\16\16\16\377\24\24\24\377\33\33\33\377\305\305\305\377\377\377\377\377\333"
+  "\333\333\322\0\0\0""8\0\0\0\26\0\0\0\6\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377\377\377\377\205"
+  "\205\205\377\377\377\377\377\377\377\377\377\271\271\271\314\0\0\0m\0\0\0"
+  "P\0\0\0>\354\354\354\330\377\377\377\377\260\260\260\377\13\13\13\377\22"
+  "\22\22\377\30\30\30\377ZZZ\377\377\377\377\377\375\375\375\376)))V\0\0\0"
+  "#\0\0\0\13\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377\377"
+  "\265\265\265\310\0\0\0l\0\0\0L\0\0\0.\0\0\0\37\211\211\211N\376\376\376\377"
+  "\376\376\376\377333\377\17\17\17\377\25\25\25\377\34\34\34\377\323\323\323"
+  "\377\377\377\377\377\320\320\320\304\0\0\0""4\0\0\0\23\0\0\0\5\0\0\0\1\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\377"
+  "\377\377\377\376\376\376\377\260\260\260\303\0\0\0k\0\0\0J\0\0\0+\0\0\0\24"
+  "\0\0\0\15\0\0\0\30\362\362\362\330\377\377\377\377\252\252\252\377\14\14"
+  "\14\377\23\23\23\377\31\31\31\377uuu\377\377\377\377\377\364\364\364\362"
+  "\0\0\0E\0\0\0\35\0\0\0\10\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\377\377\377\377\376\376\376\377\261\261\261\270\0\0\0g\0"
+  "\0\0I\0\0\0*\0\0\0\23\0\0\0\7\0\0\0\4\0\0\0\15\230\230\230M\376\376\376\377"
+  "\375\375\375\377000\377\20\20\20\377\26\26\26\377hhh\377\377\377\377\377"
+  "\371\371\371\371\0\0\0P\0\0\0%\0\0\0\13\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\377\377\377\377\277\277\277\241\0\0\0X\0\0"
+  "\0F\0\0\0)\0\0\0\23\0\0\0\7\0\0\0\2\0\0\0\1\0\0\0\6\0\0\0\26\362\362\362"
+  "\333\377\377\377\377\326\326\326\377aaa\377\211\211\211\377\371\371\371\377"
+  "\377\377\377\377\335\335\335\336\0\0\0R\0\0\0&\0\0\0\13\0\0\0\2\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\336\336\336\205\0\0\0""5\0"
+  "\0\0""7\0\0\0%\0\0\0\21\0\0\0\6\0\0\0\2\0\0\0\0\0\0\0\1\0\0\0\3\0\0\0\14"
+  "\236\236\236O\374\374\374\373\377\377\377\377\377\377\377\377\377\377\377"
+  "\377\377\377\377\377\344\344\344\351\11\11\11l\0\0\0D\0\0\0\36\0\0\0\10\0"
+  "\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\21\0"
+  "\0\0\34\0\0\0\32\0\0\0\17\0\0\0\6\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1"
+  "\0\0\0\5\0\0\0\24NNNA\355\355\355\340\366\366\366\365\346\346\346\350\301"
+  "\301\301\306\0\0\0h\0\0\0M\0\0\0,\0\0\0\22\0\0\0\5\0\0\0\1\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\7\0\0\0\12\0\0\0\11\0\0"
+  "\0\4\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\2\0\0\0\11\0\0"
+  "\0\30\0\0\0/\0\0\0D\0\0\0P\0\0\0M\0\0\0?\0\0\0)\0\0\0\25\0\0\0\7\0\0\0\2"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\2"
+  "\0\0\0\2\0\0\0\2\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\1\0\0\0\2\0\0\0\10\0\0\0\23\0\0\0\36\0\0\0%\0\0\0#\0\0\0\32\0\0\0"
+  "\20\0\0\0\7\0\0\0\2\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\1\0\0\0\2\0\0\0\5\0\0\0\10\0\0\0"
+  "\12\0\0\0\12\0\0\0\7\0\0\0\4\0\0\0\1\0\0\0\1\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
+  "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
+};
+
+} // namespace AML
diff --git a/src/amlogic/cursor-data.h b/src/amlogic/cursor-data.h
new file mode 100644
index 0000000..5ac69df
--- /dev/null
+++ b/src/amlogic/cursor-data.h
@@ -0,0 +1,38 @@
+/*
+ * Copyright (C) 2015, 2016 Igalia S.L.
+ * Copyright (C) 2015, 2016 Metrological
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <stdint.h>
+
+namespace AML {
+
+struct CursorData {
+    static const uint32_t width = 48;
+    static const uint32_t height = 48;
+    static uint8_t data[width * height * 4 + 1];
+};
+
+} // namespace AML
diff --git a/src/amlogic/ge2d.h b/src/amlogic/ge2d.h
new file mode 100644
index 0000000..c163c01
--- /dev/null
+++ b/src/amlogic/ge2d.h
@@ -0,0 +1,705 @@
+/*
+ * include/linux/amlogic/ge2d/ge2d.h
+ *
+ * Copyright (C) 2015 Amlogic, Inc. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful, but WITHOUT
+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
+ * more details.
+ *
+*/
+
+
+#ifndef _GE2D_H_
+#define _GE2D_H_
+
+
+#define MAX_BITBLT_WORK_CONFIG 4
+#define MAX_GE2D_CMD  32   /* 64 */
+
+#define GE2D_STATE_IDLE                 0
+#define GE2D_STATE_RUNNING              1
+#define GE2D_STATE_CLEANUP              2
+#define GE2D_STATE_REMOVING_WQ          3
+#define	GE2D_PROCESS_QUEUE_START        0
+#define	GE2D_PROCESS_QUEUE_STOP         1
+
+#define RELEASE_SRC1_CANVAS 0x01
+#define RELEASE_SRC2_CANVAS 0x02
+#define RELEASE_SRC1_BUFFER 0x04
+#define RELEASE_SRC2_BUFFER 0x08
+#define RELEASE_CB          0x10
+#define RELEASE_REQUIRED    0x1f
+
+#define START_FLAG          0x20
+#define RELEASE_FLAG        0x40
+#define FINISH_FLAG         0x80
+
+#define FORMAT_8BIT_COMPONENT   0
+#define COMPONENT_Y_OR_R      0
+#define COMPONENT_Cb_OR_G     1
+#define COMPONENT_Cr_OR_B     2
+#define COMPONENT_ALPHA       3
+#define FORMAT_422_YUV          1
+#define FORMAT_444_YUV_OR_RGB   2
+#define FORMAT_YUVA_OR_RGBA     3
+
+#define FILL_MODE_BOUNDARY_PIXEL    0
+#define FILL_MODE_DEFAULT_COLOR     1
+
+#define OPERATION_ADD           0    /* Cd = Cs*Fs+Cd*Fd */
+#define OPERATION_SUB           1    /* Cd = Cs*Fs-Cd*Fd */
+#define OPERATION_REVERSE_SUB   2    /* Cd = Cd*Fd-Cs*Fs */
+#define OPERATION_MIN           3    /* Cd = Min(Cd*Fd,Cs*Fs) */
+#define OPERATION_MAX           4    /* Cd = Max(Cd*Fd,Cs*Fs) */
+#define OPERATION_LOGIC         5
+
+#define COLOR_FACTOR_ZERO                     0
+#define COLOR_FACTOR_ONE                      1
+#define COLOR_FACTOR_SRC_COLOR                2
+#define COLOR_FACTOR_ONE_MINUS_SRC_COLOR      3
+#define COLOR_FACTOR_DST_COLOR                4
+#define COLOR_FACTOR_ONE_MINUS_DST_COLOR      5
+#define COLOR_FACTOR_SRC_ALPHA                6
+#define COLOR_FACTOR_ONE_MINUS_SRC_ALPHA      7
+#define COLOR_FACTOR_DST_ALPHA                8
+#define COLOR_FACTOR_ONE_MINUS_DST_ALPHA      9
+#define COLOR_FACTOR_CONST_COLOR              10
+#define COLOR_FACTOR_ONE_MINUS_CONST_COLOR    11
+#define COLOR_FACTOR_CONST_ALPHA              12
+#define COLOR_FACTOR_ONE_MINUS_CONST_ALPHA    13
+#define COLOR_FACTOR_SRC_ALPHA_SATURATE       14
+
+#define ALPHA_FACTOR_ZERO                     0
+#define ALPHA_FACTOR_ONE                      1
+#define ALPHA_FACTOR_SRC_ALPHA                2
+#define ALPHA_FACTOR_ONE_MINUS_SRC_ALPHA      3
+#define ALPHA_FACTOR_DST_ALPHA                4
+#define ALPHA_FACTOR_ONE_MINUS_DST_ALPHA      5
+#define ALPHA_FACTOR_CONST_ALPHA              6
+#define ALPHA_FACTOR_ONE_MINUS_CONST_ALPHA    7
+
+#define LOGIC_OPERATION_CLEAR       0
+#define LOGIC_OPERATION_COPY        1
+#define LOGIC_OPERATION_NOOP        2
+#define LOGIC_OPERATION_SET         3
+#define LOGIC_OPERATION_COPY_INVERT 4
+#define LOGIC_OPERATION_INVERT      5
+#define LOGIC_OPERATION_AND_REVERSE 6
+#define LOGIC_OPERATION_OR_REVERSE  7
+#define LOGIC_OPERATION_AND         8
+#define LOGIC_OPERATION_OR          9
+#define LOGIC_OPERATION_NAND        10
+#define LOGIC_OPERATION_NOR         11
+#define LOGIC_OPERATION_XOR         12
+#define LOGIC_OPERATION_EQUIV       13
+#define LOGIC_OPERATION_AND_INVERT  14
+#define LOGIC_OPERATION_OR_INVERT   15
+
+#define DST_CLIP_MODE_INSIDE    0
+#define DST_CLIP_MODE_OUTSIDE   1
+
+#define FILTER_TYPE_BICUBIC     1
+#define FILTER_TYPE_BILINEAR    2
+#define FILTER_TYPE_TRIANGLE    3
+
+#define MATRIX_YCC_TO_RGB               1
+#define MATRIX_RGB_TO_YCC               2
+#define MATRIX_FULL_RANGE_YCC_TO_RGB    3
+
+
+#define GE2D_ENDIAN_SHIFT	24
+#define GE2D_ENDIAN_MASK            (0x1 << GE2D_ENDIAN_SHIFT)
+#define GE2D_BIG_ENDIAN             (0 << GE2D_ENDIAN_SHIFT)
+#define GE2D_LITTLE_ENDIAN          (1 << GE2D_ENDIAN_SHIFT)
+
+#define GE2D_COLOR_MAP_SHIFT        20
+#define GE2D_COLOR_MAP_MASK         (0xf << GE2D_COLOR_MAP_SHIFT)
+/* nv12 &nv21, only works on m6*/
+#define GE2D_COLOR_MAP_NV12		(15 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_NV21		(14 << GE2D_COLOR_MAP_SHIFT)
+/* 16 bit */
+#define GE2D_COLOR_MAP_YUV422		(0 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_RGB655		(1 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_YUV655		(1 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_RGB844		(2 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_YUV844		(2 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_RGBA6442     (3 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_YUVA6442     (3 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_RGBA4444     (4 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_YUVA4444     (4 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_RGB565       (5 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_YUV565       (5 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_ARGB4444		(6 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_AYUV4444		(6 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_ARGB1555     (7 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_AYUV1555     (7 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_RGBA4642     (8 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_YUVA4642     (8 << GE2D_COLOR_MAP_SHIFT)
+/* 24 bit */
+#define GE2D_COLOR_MAP_RGB888       (0 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_YUV444       (0 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_RGBA5658     (1 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_YUVA5658     (1 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_ARGB8565     (2 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_AYUV8565     (2 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_RGBA6666     (3 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_YUVA6666     (3 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_ARGB6666     (4 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_AYUV6666     (4 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_BGR888		(5 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_VUY888		(5 << GE2D_COLOR_MAP_SHIFT)
+/* 32 bit */
+#define GE2D_COLOR_MAP_RGBA8888		(0 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_YUVA8888		(0 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_ARGB8888     (1 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_AYUV8888     (1 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_ABGR8888     (2 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_AVUY8888     (2 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_BGRA8888     (3 << GE2D_COLOR_MAP_SHIFT)
+#define GE2D_COLOR_MAP_VUYA8888     (3 << GE2D_COLOR_MAP_SHIFT)
+
+/* format code is defined as:
+[11] : 1-YUV color space, 0-RGB color space
+[10] : compress_range
+[9:8]: format
+[7:6]: 8bit_mode_sel
+[5]  : LUT_EN
+[4:3]: PIC_STRUCT
+[2]  : SEP_EN
+[1:0]: X_YC_RATIO, SRC1_Y_YC_RATIO
+*/
+#define GE2D_FORMAT_MASK                0x0ffff
+#define GE2D_BPP_MASK                   0x00300
+#define GE2D_BPP_8BIT                   0x00000
+#define GE2D_BPP_16BIT                  0x00100
+#define GE2D_BPP_24BIT                  0x00200
+#define GE2D_BPP_32BIT                  0x00300
+#define GE2D_FORMAT_YUV                 0x20000
+#define GE2D_FORMAT_COMP_RANGE          0x10000
+/*bit8(2)  format   bi6(2) mode_8b_sel  bit5(1)lut_en   bit2 sep_en*/
+/*M  seperate block S one block.*/
+
+#define GE2D_FMT_S8_Y		0x00000 /* 00_00_0_00_0_00 */
+#define GE2D_FMT_S8_CB		0x00040 /* 00_01_0_00_0_00 */
+#define GE2D_FMT_S8_CR		0x00080 /* 00_10_0_00_0_00 */
+#define GE2D_FMT_S8_R		0x00000 /* 00_00_0_00_0_00 */
+#define GE2D_FMT_S8_G		0x00040 /* 00_01_0_00_0_00 */
+#define GE2D_FMT_S8_B		0x00080 /* 00_10_0_00_0_00 */
+#define GE2D_FMT_S8_A		0x000c0 /* 00_11_0_00_0_00 */
+#define GE2D_FMT_S8_LUT		0x00020 /* 00_00_1_00_0_00 */
+#define GE2D_FMT_S16_YUV422	0x20102 /* 01_00_0_00_0_00 */
+#define GE2D_FMT_S16_RGB (GE2D_LITTLE_ENDIAN|0x00100) /* 01_00_0_00_0_00 */
+#define GE2D_FMT_S24_YUV444	0x20200 /* 10_00_0_00_0_00 */
+#define GE2D_FMT_S24_RGB (GE2D_LITTLE_ENDIAN|0x00200) /* 10_00_0_00_0_00 */
+#define GE2D_FMT_S32_YUVA444	0x20300 /* 11_00_0_00_0_00 */
+#define GE2D_FMT_S32_RGBA (GE2D_LITTLE_ENDIAN|0x00300) /* 11_00_0_00_0_00 */
+#define GE2D_FMT_M24_YUV420	0x20007 /* 00_00_0_00_1_11 */
+#define GE2D_FMT_M24_YUV422	0x20006 /* 00_00_0_00_1_10 */
+#define GE2D_FMT_M24_YUV444	0x20004 /* 00_00_0_00_1_00 */
+#define GE2D_FMT_M24_RGB		0x00004 /* 00_00_0_00_1_00 */
+#define GE2D_FMT_M24_YUV420T	0x20017 /* 00_00_0_10_1_11 */
+#define GE2D_FMT_M24_YUV420B	0x2001f /* 00_00_0_11_1_11 */
+
+#define GE2D_FMT_M24_YUV420SP		0x20207
+/* 01_00_0_00_1_11 nv12 &nv21, only works on m6. */
+#define GE2D_FMT_M24_YUV420SPT		0x20217
+/* 01_00_0_00_1_11 nv12 &nv21, only works on m6. */
+#define GE2D_FMT_M24_YUV420SPB		0x2021f
+
+#define GE2D_FMT_S16_YUV422T	0x20110 /* 01_00_0_10_0_00 */
+#define GE2D_FMT_S16_YUV422B	0x20138 /* 01_00_0_11_0_00 */
+#define GE2D_FMT_S24_YUV444T	0x20210 /* 10_00_0_10_0_00 */
+#define GE2D_FMT_S24_YUV444B	0x20218 /* 10_00_0_11_0_00 */
+
+/* back compatible defines */
+#define GE2D_FORMAT_S8_Y            (GE2D_FORMAT_YUV|GE2D_FMT_S8_Y)
+#define GE2D_FORMAT_S8_CB          (GE2D_FORMAT_YUV|GE2D_FMT_S8_CB)
+#define GE2D_FORMAT_S8_CR          (GE2D_FORMAT_YUV|GE2D_FMT_S8_CR)
+#define GE2D_FORMAT_S8_R            GE2D_FMT_S8_R
+#define GE2D_FORMAT_S8_G            GE2D_FMT_S8_G
+#define GE2D_FORMAT_S8_B            GE2D_FMT_S8_B
+#define GE2D_FORMAT_S8_A            GE2D_FMT_S8_A
+#define GE2D_FORMAT_S8_LUT          GE2D_FMT_S8_LUT
+/* nv12 &nv21, only works on m6. */
+#define GE2D_FORMAT_M24_NV12  (GE2D_FMT_M24_YUV420SP | GE2D_COLOR_MAP_NV12)
+#define GE2D_FORMAT_M24_NV12T (GE2D_FMT_M24_YUV420SPT | GE2D_COLOR_MAP_NV12)
+#define GE2D_FORMAT_M24_NV12B (GE2D_FMT_M24_YUV420SPB | GE2D_COLOR_MAP_NV12)
+#define GE2D_FORMAT_M24_NV21  (GE2D_FMT_M24_YUV420SP | GE2D_COLOR_MAP_NV21)
+#define GE2D_FORMAT_M24_NV21T (GE2D_FMT_M24_YUV420SPT | GE2D_COLOR_MAP_NV21)
+#define GE2D_FORMAT_M24_NV21B (GE2D_FMT_M24_YUV420SPB | GE2D_COLOR_MAP_NV21)
+
+
+#define GE2D_FORMAT_S12_RGB_655 (GE2D_FMT_S16_RGB | GE2D_COLOR_MAP_RGB655)
+#define GE2D_FORMAT_S16_YUV422 (GE2D_FMT_S16_YUV422 | GE2D_COLOR_MAP_YUV422)
+#define GE2D_FORMAT_S16_RGB_655 (GE2D_FMT_S16_RGB | GE2D_COLOR_MAP_RGB655)
+#define GE2D_FORMAT_S24_YUV444 (GE2D_FMT_S24_YUV444 | GE2D_COLOR_MAP_YUV444)
+#define GE2D_FORMAT_S24_RGB (GE2D_FMT_S24_RGB | GE2D_COLOR_MAP_RGB888)
+#define GE2D_FORMAT_S32_YUVA444 (GE2D_FMT_S32_YUVA444 | GE2D_COLOR_MAP_YUVA4444)
+#define GE2D_FORMAT_S32_RGBA (GE2D_FMT_S32_RGBA | GE2D_COLOR_MAP_RGBA8888)
+#define GE2D_FORMAT_M24_YUV420      GE2D_FMT_M24_YUV420
+#define GE2D_FORMAT_M24_YUV422      GE2D_FMT_M24_YUV422
+#define GE2D_FORMAT_M24_YUV444      GE2D_FMT_M24_YUV444
+#define GE2D_FORMAT_M24_RGB         GE2D_FMT_M24_RGB
+#define GE2D_FORMAT_M24_YUV420T     GE2D_FMT_M24_YUV420T
+#define GE2D_FORMAT_M24_YUV420B     GE2D_FMT_M24_YUV420B
+#define GE2D_FORMAT_S16_YUV422T (GE2D_FMT_S16_YUV422T | GE2D_COLOR_MAP_YUV422)
+#define GE2D_FORMAT_S16_YUV422B (GE2D_FMT_S16_YUV422B | GE2D_COLOR_MAP_YUV422)
+#define GE2D_FORMAT_S24_YUV444T (GE2D_FMT_S24_YUV444T | GE2D_COLOR_MAP_YUV444)
+#define GE2D_FORMAT_S24_YUV444B (GE2D_FMT_S24_YUV444B | GE2D_COLOR_MAP_YUV444)
+/* format added in A1H */
+/*16 bit*/
+#define GE2D_FORMAT_S16_RGB_565   (GE2D_FMT_S16_RGB | GE2D_COLOR_MAP_RGB565)
+#define GE2D_FORMAT_S16_RGB_844   (GE2D_FMT_S16_RGB | GE2D_COLOR_MAP_RGB844)
+#define GE2D_FORMAT_S16_RGBA_6442 (GE2D_FMT_S16_RGB | GE2D_COLOR_MAP_RGBA6442)
+#define GE2D_FORMAT_S16_RGBA_4444 (GE2D_FMT_S16_RGB | GE2D_COLOR_MAP_RGBA4444)
+#define GE2D_FORMAT_S16_ARGB_4444 (GE2D_FMT_S16_RGB | GE2D_COLOR_MAP_ARGB4444)
+#define GE2D_FORMAT_S16_ARGB_1555 (GE2D_FMT_S16_RGB | GE2D_COLOR_MAP_ARGB1555)
+#define GE2D_FORMAT_S16_RGBA_4642 (GE2D_FMT_S16_RGB | GE2D_COLOR_MAP_RGBA4642)
+/*24 bit*/
+#define GE2D_FORMAT_S24_RGBA_5658 (GE2D_FMT_S24_RGB | GE2D_COLOR_MAP_RGBA5658)
+#define GE2D_FORMAT_S24_ARGB_8565 (GE2D_FMT_S24_RGB | GE2D_COLOR_MAP_ARGB8565)
+#define GE2D_FORMAT_S24_RGBA_6666 (GE2D_FMT_S24_RGB | GE2D_COLOR_MAP_RGBA6666)
+#define GE2D_FORMAT_S24_ARGB_6666 (GE2D_FMT_S24_RGB | GE2D_COLOR_MAP_ARGB6666)
+#define GE2D_FORMAT_S24_BGR (GE2D_FMT_S24_RGB | GE2D_COLOR_MAP_BGR888)
+/*32 bit*/
+#define GE2D_FORMAT_S32_ARGB (GE2D_FMT_S32_RGBA | GE2D_COLOR_MAP_ARGB8888)
+#define GE2D_FORMAT_S32_ABGR (GE2D_FMT_S32_RGBA | GE2D_COLOR_MAP_ABGR8888)
+#define GE2D_FORMAT_S32_BGRA (GE2D_FMT_S32_RGBA | GE2D_COLOR_MAP_BGRA8888)
+
+
+#define	UPDATE_SRC_DATA     0x01
+#define	UPDATE_SRC_GEN      0x02
+#define	UPDATE_DST_DATA     0x04
+#define	UPDATE_DST_GEN      0x08
+#define	UPDATE_DP_GEN       0x10
+#define	UPDATE_SCALE_COEF   0x20
+#define	UPDATE_ALL          0x3f
+
+struct rectangle_s {
+	int x;   /* X coordinate of its top-left point */
+	int y;   /* Y coordinate of its top-left point */
+	int w;   /* width of it */
+	int h;   /* height of it */
+};
+
+struct ge2d_para_s {
+	unsigned int    color;
+	struct rectangle_s src1_rect;
+	struct rectangle_s src2_rect;
+	struct rectangle_s dst_rect;
+	int op;
+};
+
+//struct ge2d_gen_s {
+//	unsigned char     interrupt_ctrl;
+//
+//	unsigned char     dp_onoff_mode;
+//	unsigned char     vfmt_onoff_en;
+//	unsigned int      dp_on_cnt;
+//	unsigned int      dp_off_cnt;
+//};
+//
+//struct ge2d_src1_data_s {
+//	unsigned char     urgent_en;
+//	unsigned char     ddr_burst_size_y;
+//	unsigned char     ddr_burst_size_cb;
+//	unsigned char     ddr_burst_size_cr;
+//	unsigned int	  canaddr;
+//	unsigned char     x_yc_ratio;
+//	unsigned char     y_yc_ratio;
+//	unsigned char     sep_en;
+//	unsigned char     format;
+//
+//	unsigned char     endian;
+//	unsigned char     color_map;
+//
+//	unsigned char     mode_8b_sel;
+//	unsigned char     lut_en;
+//	unsigned int      def_color;
+//	unsigned int      format_all;
+//};
+//
+//struct ge2d_src1_gen_s {
+//	int               clipx_start;
+//	int               clipx_end;
+//	int               clipy_start;
+//	int               clipy_end;
+//	unsigned char     clipx_start_ex;
+//	unsigned char     clipx_end_ex;
+//	unsigned char     clipy_start_ex;
+//	unsigned char     clipy_end_ex;
+//	unsigned char     pic_struct;
+//	/* bit1 for outside alpha , bit0 for color data */
+//	unsigned char     fill_mode;
+//	unsigned int      outside_alpha;
+//	unsigned char     chfmt_rpt_pix;
+//	unsigned char     cvfmt_rpt_pix;
+//};
+//
+//struct ge2d_src2_dst_data_s {
+//	unsigned char     urgent_en;
+//	unsigned char     ddr_burst_size;
+//	unsigned char     src2_canaddr;
+//	unsigned char     src2_format;
+//
+//	unsigned char     src2_endian;
+//	unsigned char     src2_color_map;
+//
+//	unsigned char     src2_mode_8b_sel;
+//	unsigned int      src2_def_color;
+//
+//	unsigned int     dst_canaddr;
+//	unsigned char    dst_format;
+//
+//	unsigned char     dst_endian;
+//	unsigned char     dst_color_map;
+//
+//	unsigned char     dst_mode_8b_sel;
+//
+//	unsigned int      src2_format_all;
+//	unsigned int      dst_format_all;
+//
+//	/* only for m6 */
+//	unsigned char	dst2_pixel_byte_width;
+//	unsigned char	dst2_color_map;
+//	unsigned char	dst2_discard_mode;
+//	unsigned char	dst2_enable;
+//
+//};
+//
+//struct ge2d_src2_dst_gen_s {
+//	int               src2_clipx_start;
+//	int               src2_clipx_end;
+//	int               src2_clipy_start;
+//	int               src2_clipy_end;
+//	unsigned char     src2_pic_struct;
+//	/* bit1 for outside alpha , bit0 for color data */
+//	unsigned char     src2_fill_mode;
+//	unsigned int      src2_outside_alpha;
+//
+//	int               dst_clipx_start;
+//	int               dst_clipx_end;
+//	int               dst_clipy_start;
+//	int               dst_clipy_end;
+//	unsigned char     dst_clip_mode;
+//	unsigned char     dst_pic_struct;
+//};
+//
+//struct ge2d_dp_gen_s {
+//	/* scaler related */
+//	unsigned char     src1_vsc_bank_length;
+//	unsigned char     src1_vsc_phase0_always_en;
+//	unsigned char     src1_hsc_bank_length;
+//	unsigned char     src1_hsc_phase0_always_en;
+//	/* 1bit, 0: using minus, 1: using repeat data */
+//	unsigned char     src1_hsc_rpt_ctrl;
+//	/* 1bit, 0: using minus  1: using repeat data */
+//	unsigned char     src1_vsc_rpt_ctrl;
+//	unsigned char     src1_hsc_nearest_en;
+//	unsigned char     src1_vsc_nearest_en;
+//
+//	unsigned char     antiflick_en;
+//	unsigned char     antiflick_ycbcr_rgb_sel;
+//	unsigned char     antiflick_cbcr_en;
+//	/* Y= (R * r_coef + G * g_coef + B * b_coef)/256 */
+//	unsigned int      antiflick_r_coef;
+//	unsigned int      antiflick_g_coef;
+//	unsigned int      antiflick_b_coef;
+//	unsigned int      antiflick_color_filter_n1[4];
+//	unsigned int      antiflick_color_filter_n2[4];
+//	unsigned int      antiflick_color_filter_n3[4];
+//	unsigned int      antiflick_color_filter_th[3];
+//	unsigned int      antiflick_alpha_filter_n1[4];
+//	unsigned int      antiflick_alpha_filter_n2[4];
+//	unsigned int      antiflick_alpha_filter_n3[4];
+//	unsigned int      antiflick_alpha_filter_th[3];
+//	/* matrix related */
+//	unsigned char     use_matrix_default;
+//	unsigned char     conv_matrix_en;
+//	unsigned char     matrix_sat_in_en;
+//	unsigned char     matrix_minus_16_ctrl; /* 3bit */
+//	unsigned char     matrix_sign_ctrl;     /* 3bit */
+//	int               matrix_offset[3];
+//	int               matrix_coef[9];
+//
+//	unsigned char     src1_gb_alpha;
+//	unsigned int      alu_const_color;
+//
+//	unsigned char     src1_key_en;
+//	unsigned char     src2_key_en;
+//	unsigned char     src1_key_mode;
+//	unsigned char     src2_key_mode;
+//	unsigned int      src1_key;
+//	unsigned int      src2_key;
+//	unsigned int      src1_key_mask;
+//	unsigned int      src2_key_mask;
+//	unsigned char     bitmask_en;
+//	unsigned char     bytemask_only;
+//	unsigned int      bitmask;
+//
+//};
+
+//struct ge2d_cmd_s {
+//	int              src1_x_start;
+//	int              src1_y_start;
+//	int              src1_x_end;
+//	int              src1_y_end;
+//	/* unsigned char    src1_x_start_ex; */
+//	/* unsigned char    src1_y_start_ex; */
+//	/* unsigned char    src1_x_end_ex; */
+//	/* unsigned char    src1_y_end_ex; */
+//
+//	unsigned char    src1_x_rev;
+//	unsigned char    src1_y_rev;
+//	/* unsigned char    src1_x_chr_phase; */
+//	/* unsigned char    src1_y_chr_phase; */
+//	unsigned char    src1_fill_color_en;
+//
+//	int              src2_x_start;
+//	int              src2_y_start;
+//	int              src2_x_end;
+//	int              src2_y_end;
+//	unsigned char    src2_x_rev;
+//	unsigned char    src2_y_rev;
+//	unsigned char    src2_fill_color_en;
+//
+//	int              dst_x_start;
+//	int              dst_y_start;
+//	int              dst_x_end;
+//	int              dst_y_end;
+//	unsigned char    dst_xy_swap;
+//	unsigned char    dst_x_rev;
+//	unsigned char    dst_y_rev;
+//
+//	int              sc_prehsc_en;
+//	int              sc_prevsc_en;
+//	int              sc_hsc_en;
+//	int              sc_vsc_en;
+//	int              vsc_phase_step;
+//	int              vsc_phase_slope;
+//	unsigned char    vsc_rpt_l0_num;
+//	int              vsc_ini_phase;
+//	int              hsc_phase_step;
+//	int              hsc_phase_slope;
+//	unsigned char    hsc_rpt_p0_num;
+//	int              hsc_ini_phase;
+//	unsigned char    hsc_div_en;
+//	unsigned int    hsc_div_length;
+//	int              hsc_adv_num;
+//	int              hsc_adv_phase;
+//
+//	unsigned char    src1_cmult_asel;
+//	unsigned char    src2_cmult_asel;
+//
+//	unsigned char    color_blend_mode;
+//	unsigned char    color_src_blend_factor;
+//	unsigned char    color_dst_blend_factor;
+//	unsigned char    color_logic_op;
+//
+//	unsigned char    alpha_blend_mode;
+//	unsigned char    alpha_src_blend_factor;
+//	unsigned char    alpha_dst_blend_factor;
+//	unsigned char    alpha_logic_op;
+//
+//	int (*cmd_cb)(unsigned);
+//	unsigned int     cmd_cb_param;
+//	unsigned int     src1_buffer;
+//	unsigned int     src2_buffer;
+//	unsigned char    release_flag;
+//	unsigned char    wait_done_flag;
+//};
+
+//struct ge2d_config_s {
+//	struct ge2d_gen_s            gen;
+//	struct ge2d_src1_data_s      src1_data;
+//	struct ge2d_src1_gen_s       src1_gen;
+//	struct ge2d_src2_dst_data_s  src2_dst_data;
+//	struct ge2d_src2_dst_gen_s   src2_dst_gen;
+//	struct ge2d_dp_gen_s         dp_gen;
+//	unsigned              v_scale_coef_type;
+//	unsigned              h_scale_coef_type;
+//	unsigned              update_flag;
+//};
+
+enum ge2d_src_dst_e {
+	OSD0_OSD0 = 0,
+	OSD0_OSD1,
+	OSD1_OSD1,
+	OSD1_OSD0,
+	ALLOC_OSD0,
+	ALLOC_OSD1,
+	ALLOC_ALLOC,
+	TYPE_INVALID,
+};
+
+enum ge2d_src_canvas_type_e {
+	CANVAS_OSD0 = 0,
+	CANVAS_OSD1,
+	CANVAS_ALLOC,
+	CANVAS_TYPE_INVALID,
+};
+
+//struct ge2d_queue_item_s {
+//	struct list_head list;
+//	struct ge2d_cmd_s cmd;
+//	struct ge2d_config_s config;
+//};
+
+//struct ge2d_context_s {
+//	/* connect all process in one queue for RR process. */
+//	struct list_head   list;
+//	/* current wq configuration */
+//	struct ge2d_config_s       config;
+//	struct ge2d_cmd_s		cmd;
+//	struct list_head	work_queue;
+//	struct list_head	free_queue;
+//	wait_queue_head_t	cmd_complete;
+//	int				queue_dirty;
+//	int				queue_need_recycle;
+//	spinlock_t		lock;	/* for get and release item. */
+//};
+//
+//struct ge2d_event_s {
+//	wait_queue_head_t cmd_complete;
+//	struct completion process_complete;
+//	/* for queue switch and create destroy queue. */
+//	spinlock_t sem_lock;
+//	struct semaphore cmd_in_sem;
+//};
+//
+//struct ge2d_manager_s {
+//	struct list_head process_queue;
+//	struct ge2d_context_s *current_wq;
+//	struct ge2d_context_s *last_wq;
+//	struct task_struct *ge2d_thread;
+//	struct ge2d_event_s event;
+//	int irq_num;
+//	int ge2d_state;
+//	int process_queue_state;
+//	struct platform_device *pdev;
+//};
+
+struct src_dst_para_s {
+	int  xres;
+	int  yres;
+	int  canvas_index;
+	int  bpp;
+	int  ge2d_color_index;
+};
+
+enum ge2d_op_type_e {
+	GE2D_OP_DEFAULT = 0,
+	GE2D_OP_FILLRECT,
+	GE2D_OP_BLIT,
+	GE2D_OP_STRETCHBLIT,
+	GE2D_OP_BLEND,
+	GE2D_OP_MAXNUM
+};
+
+struct config_planes_s {
+	unsigned long addr;
+	unsigned int w;
+	unsigned int h;
+};
+
+struct src_key_ctrl_s {
+	int key_enable;
+	int key_color;
+	int key_mask;
+	int key_mode;
+};
+
+struct config_para_s {
+	int  src_dst_type;
+	int  alu_const_color;
+	unsigned int src_format;
+	unsigned int dst_format; /* add for src&dst all in user space. */
+
+	struct config_planes_s src_planes[4];
+	struct config_planes_s dst_planes[4];
+	struct src_key_ctrl_s  src_key;
+};
+
+struct src_dst_para_ex_s {
+	int  canvas_index;
+	int  top;
+	int  left;
+	int  width;
+	int  height;
+	int  format;
+	int  mem_type;
+	int  color;
+	unsigned char x_rev;
+	unsigned char y_rev;
+	unsigned char fill_color_en;
+	unsigned char fill_mode;
+};
+
+struct config_para_ex_s {
+	struct src_dst_para_ex_s src_para;
+	struct src_dst_para_ex_s src2_para;
+	struct src_dst_para_ex_s dst_para;
+
+	/* key mask */
+	struct src_key_ctrl_s  src_key;
+	struct src_key_ctrl_s  src2_key;
+
+	int alu_const_color;
+	unsigned src1_gb_alpha;
+	unsigned op_mode;
+	unsigned char bitmask_en;
+	unsigned char bytemask_only;
+	unsigned int  bitmask;
+	unsigned char dst_xy_swap;
+
+	/* scaler and phase releated */
+	unsigned hf_init_phase;
+	int hf_rpt_num;
+	unsigned hsc_start_phase_step;
+	int hsc_phase_slope;
+	unsigned vf_init_phase;
+	int vf_rpt_num;
+	unsigned vsc_start_phase_step;
+	int vsc_phase_slope;
+	unsigned char src1_vsc_phase0_always_en;
+	unsigned char src1_hsc_phase0_always_en;
+	/* 1bit, 0: using minus, 1: using repeat data */
+	unsigned char src1_hsc_rpt_ctrl;
+	/* 1bit, 0: using minus  1: using repeat data */
+	unsigned char src1_vsc_rpt_ctrl;
+
+	/* canvas info */
+	struct config_planes_s src_planes[4];
+	struct config_planes_s src2_planes[4];
+	struct config_planes_s dst_planes[4];
+};
+
+#define	GE2D_STRETCHBLIT_NOALPHA_NOBLOCK    0x4708
+#define	GE2D_BLIT_NOALPHA_NOBLOCK           0x4707
+#define	GE2D_BLEND_NOBLOCK                  0x4706
+#define	GE2D_BLIT_NOBLOCK                   0x4705
+#define	GE2D_STRETCHBLIT_NOBLOCK            0x4704
+#define	GE2D_FILLRECTANGLE_NOBLOCK          0x4703
+
+#define GE2D_IOC_MAGIC  'G'
+
+#define	GE2D_STRETCHBLIT_NOALPHA            0x4702
+#define	GE2D_BLIT_NOALPHA                   0x4701
+#define	GE2D_BLEND                          0x4700
+#define	GE2D_BLIT                           0x46ff
+#define	GE2D_STRETCHBLIT                    0x46fe
+#define	GE2D_FILLRECTANGLE                  0x46fd
+#define	GE2D_SRCCOLORKEY                    0x46fc
+#define	GE2D_SET_COEF                       0x46fb
+#define	GE2D_CONFIG_EX                       _IOW(GE2D_IOC_MAGIC, 0x01,  struct config_para_ex_s)
+#define	GE2D_CONFIG                         _IOW(GE2D_IOC_MAGIC, 0x00, struct config_para_s)
+#define	GE2D_ANTIFLICKER_ENABLE             0x46f8
+
+#endif
diff --git a/src/amlogic/interfaces.h b/src/amlogic/interfaces.h
new file mode 100644
index 0000000..7541e9b
--- /dev/null
+++ b/src/amlogic/interfaces.h
@@ -0,0 +1,48 @@
+/*
+ * Copyright (C) 2015, 2016 Igalia S.L.
+ * Copyright (C) 2015, 2016 Metrological
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef aml_interfaces_h
+#define aml_interfaces_h
+
+#include <wpe/wpe.h>
+#include <wpe/wpe-egl.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+extern struct wpe_renderer_backend_egl_interface aml_renderer_backend_egl_interface;
+extern struct wpe_renderer_backend_egl_target_interface aml_renderer_backend_egl_target_interface;
+extern struct wpe_renderer_backend_egl_offscreen_target_interface aml_renderer_backend_egl_offscreen_target_interface;
+
+extern struct wpe_view_backend_interface aml_view_backend_interface;
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif // aml_interfaces_h
diff --git a/src/amlogic/ipc-aml.h b/src/amlogic/ipc-aml.h
new file mode 100644
index 0000000..eb60ede
--- /dev/null
+++ b/src/amlogic/ipc-aml.h
@@ -0,0 +1,95 @@
+/*
+ * Copyright (C) 2015, 2016 Igalia S.L.
+ * Copyright (C) 2015, 2016 Metrological
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#ifndef wpe_platform_ipc_aml_h
+#define wpe_platform_ipc_aml_h
+
+#include <memory>
+#include <stdint.h>
+
+namespace IPC {
+
+namespace AML {
+
+struct TargetConstruction {
+    uint32_t width;
+    uint32_t height;
+    uint8_t padding[24];
+
+    static const uint64_t code = 1;
+    static void construct(Message& message, uint32_t width, uint32_t height)
+    {
+        message.messageCode = code;
+
+        auto& messageData = *reinterpret_cast<TargetConstruction*>(std::addressof(message.messageData));
+        messageData.width = width;
+        messageData.height = height;
+    }
+    static TargetConstruction& cast(Message& message)
+    {
+        return *reinterpret_cast<TargetConstruction*>(std::addressof(message.messageData));
+    }
+};
+static_assert(sizeof(TargetConstruction) == Message::dataSize, "TargetConstruction is of correct size");
+
+struct BufferCommit {
+    uint8_t padding[Message::dataSize];
+
+    static const uint64_t code = 2;
+    static void construct(Message& message)
+    {
+        message.messageCode = code;
+
+        auto& messageData = *reinterpret_cast<BufferCommit*>(std::addressof(message.messageData));
+    }
+    static BufferCommit& cast(Message& message)
+    {
+        return *reinterpret_cast<BufferCommit*>(std::addressof(message.messageData));
+    }
+};
+static_assert(sizeof(BufferCommit) == Message::dataSize, "BufferCommit is of correct size");
+
+struct FrameComplete {
+    int8_t padding[Message::dataSize];
+
+    static const uint64_t code = 3;
+    static void construct(Message& message)
+    {
+        message.messageCode = code;
+    }
+    static FrameComplete& cast(Message& message)
+    {
+        return *reinterpret_cast<FrameComplete*>(std::addressof(message.messageData));
+    }
+};
+static_assert(sizeof(FrameComplete) == Message::dataSize, "FrameComplete is of correct size");
+
+} // namespace AML
+
+} // namespace IPC
+
+#endif // wpe_platform_ipc_aml_h
diff --git a/src/amlogic/renderer-backend.cpp b/src/amlogic/renderer-backend.cpp
new file mode 100644
index 0000000..e39524b
--- /dev/null
+++ b/src/amlogic/renderer-backend.cpp
@@ -0,0 +1,182 @@
+/*
+ * Copyright (C) 2015, 2016 Igalia S.L.
+ * Copyright (C) 2015, 2016 Metrological
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <wpe/wpe-egl.h>
+
+#include "ipc.h"
+#include "ipc-aml.h"
+#include <EGL/egl.h>
+
+#include <cstdio>
+
+namespace AML {
+
+struct EGLTarget : public IPC::Client::Handler {
+    EGLTarget(struct wpe_renderer_backend_egl_target*, int);
+    virtual ~EGLTarget();
+
+    // IPC::Client::Handler
+    void handleMessage(char* data, size_t size) override;
+
+    void constructTarget(uint32_t, uint32_t);
+
+    fbdev_window nativeWindow;
+    bool isConstructed = false;
+
+    struct wpe_renderer_backend_egl_target* target;
+    IPC::Client ipcClient;
+};
+
+EGLTarget::EGLTarget(struct wpe_renderer_backend_egl_target* target, int hostFd)
+    : target(target)
+{
+    ipcClient.initialize(*this, hostFd);
+
+    // Wait for the TargetConstruction message from wpe_view_backend.
+    while (!isConstructed)
+        ipcClient.readSynchronously();
+}
+
+EGLTarget::~EGLTarget()
+{
+    ipcClient.deinitialize();
+}
+
+void EGLTarget::handleMessage(char* data, size_t size)
+{
+    if (size != IPC::Message::size)
+        return;
+
+    auto& message = IPC::Message::cast(data);
+    switch (message.messageCode) {
+    case IPC::AML::TargetConstruction::code:
+    {
+        auto& targetConstruction = IPC::AML::TargetConstruction::cast(message);
+        constructTarget(targetConstruction.width, targetConstruction.height);
+        break;
+    }
+    case IPC::AML::FrameComplete::code:
+    {
+        wpe_renderer_backend_egl_target_dispatch_frame_complete(target);
+        break;
+    }
+    default:
+        fprintf(stderr, "EGLTarget: unhandled message\n");
+    };
+}
+
+void EGLTarget::constructTarget(uint32_t width, uint32_t height)
+{
+    nativeWindow.width = width;
+    nativeWindow.height = height;
+    isConstructed = true;
+}
+
+} // namespace AML
+
+extern "C" {
+
+struct wpe_renderer_backend_egl_interface aml_renderer_backend_egl_interface = {
+    // create
+    [](int) -> void*
+    {
+        return nullptr;
+    },
+    // destroy
+    [](void* data)
+    {
+    },
+    // get_native_display
+    [](void* data) -> EGLNativeDisplayType
+    {
+        return EGL_DEFAULT_DISPLAY;
+    },
+};
+
+struct wpe_renderer_backend_egl_target_interface aml_renderer_backend_egl_target_interface = {
+    // create
+    [](struct wpe_renderer_backend_egl_target* target, int host_fd) -> void*
+    {
+        return new AML::EGLTarget(target, host_fd);
+    },
+    // destroy
+    [](void* data)
+    {
+        auto* target = static_cast<AML::EGLTarget*>(data);
+        delete target;
+    },
+    // initialize
+    [](void* data, void* backend_data, uint32_t width, uint32_t height)
+    {
+    },
+    // get_native_window
+    [](void* data) -> EGLNativeWindowType
+    {
+        auto& target = *static_cast<AML::EGLTarget*>(data);
+        return static_cast<EGLNativeWindowType>(&target.nativeWindow);
+    },
+    // resize
+    [](void* data, uint32_t width, uint32_t height)
+    {
+    },
+    // frame_will_render
+    [](void* data)
+    {
+    },
+    // frame_rendered
+    [](void* data)
+    {
+        auto& target = *static_cast<AML::EGLTarget*>(data);
+
+        IPC::Message message;
+        IPC::AML::BufferCommit::construct(message);
+        target.ipcClient.sendMessage(IPC::Message::data(message), IPC::Message::size);
+    },
+};
+
+struct wpe_renderer_backend_egl_offscreen_target_interface aml_renderer_backend_egl_offscreen_target_interface = {
+    // create
+    []() -> void*
+    {
+        return nullptr;
+    },
+    // destroy
+    [](void* data)
+    {
+    },
+    // initialize
+    [](void* data, void* backend_data)
+    {
+    },
+    // get_native_window
+    [](void* data) -> EGLNativeWindowType
+    {
+        return nullptr;
+    },
+};
+
+}
diff --git a/src/amlogic/view-backend.cpp b/src/amlogic/view-backend.cpp
new file mode 100644
index 0000000..46bb35f
--- /dev/null
+++ b/src/amlogic/view-backend.cpp
@@ -0,0 +1,292 @@
+/*
+ * Copyright (C) 2015, 2016 Igalia S.L.
+ * Copyright (C) 2015, 2016 Metrological
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions
+ * are met:
+ * 1. Redistributions of source code must retain the above copyright
+ *    notice, this list of conditions and the following disclaimer.
+ * 2. Redistributions in binary form must reproduce the above copyright
+ *    notice, this list of conditions and the following disclaimer in the
+ *    documentation and/or other materials provided with the distribution.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
+ * PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ */
+
+#include <wpe/wpe.h>
+
+#include "Libinput/LibinputServer.h"
+#include "cursor-data.h"
+#include "ipc.h"
+#include "ipc-aml.h"
+#include "ge2d.h"
+#include <cstdio>
+#include <memory>
+#include <fcntl.h>
+#include <sys/eventfd.h>
+#include <sys/time.h>
+#include <sys/ioctl.h>
+
+namespace AML {
+
+struct ViewBackend;
+
+struct ViewBackend : public IPC::Host::Handler, public WPE::LibinputServer::Client {
+    ViewBackend(struct wpe_view_backend*);
+    virtual ~ViewBackend();
+
+    void initialize();
+    void initializeRenderingTarget();
+    void initializeInput();
+
+    int releaseClientFD();
+
+    // IPC::Host::Handler
+    void handleFd(int) override;
+    void handleMessage(char*, size_t) override;
+
+    void handleUpdate();
+
+    // WPE::LibinputServer::Client
+    void handleKeyboardEvent(struct wpe_input_keyboard_event*) override;
+    void handlePointerEvent(struct wpe_input_pointer_event*) override;
+    void handleAxisEvent(struct wpe_input_axis_event*) override;
+    void handleTouchEvent(struct wpe_input_touch_event*) override;
+
+    struct wpe_view_backend* backend;
+    IPC::Host ipcHost;
+
+    uint32_t width = 1920;
+    uint32_t height = 1080;
+
+    struct Cursor : public WPE::LibinputServer::Client {
+        Cursor(WPE::LibinputServer::Client&, uint32_t, uint32_t);
+        ~Cursor();
+
+        // WPE::LibinputServer::Client
+        void handleKeyboardEvent(struct wpe_input_keyboard_event*) override;
+        void handlePointerEvent(struct wpe_input_pointer_event*) override;
+        void handleAxisEvent(struct wpe_input_axis_event*) override;
+        void handleTouchEvent(struct wpe_input_touch_event*) override;
+
+        static const uint32_t cursorWidth;
+        static const uint32_t cursorHeight;
+
+        WPE::LibinputServer::Client& targetClient;
+        uint32_t ge2d_fd = -1;
+        std::pair<uint32_t, uint32_t> position;
+        std::pair<uint32_t, uint32_t> displaySize;
+    };
+    std::unique_ptr<Cursor> cursor;
+};
+
+ViewBackend::ViewBackend(struct wpe_view_backend* backend)
+    : backend(backend)
+{
+    ipcHost.initialize(*this);
+}
+
+ViewBackend::~ViewBackend()
+{
+    ipcHost.deinitialize();
+}
+
+void ViewBackend::initialize()
+{
+    if (auto *w = getenv("WEBKIT_RESOLUTION_WIDTH")) {
+        int32_t tmp = atoi(w);
+        if (tmp > 0)
+            width = tmp;
+    }
+
+    if (auto *h = getenv("WEBKIT_RESOLUTION_HEIGHT")) {
+        int32_t tmp = atoi(h);
+        if (tmp > 0)
+            height = tmp;
+    }
+    wpe_view_backend_dispatch_set_size(backend, width, height);
+    initializeInput();
+}
+
+void ViewBackend::initializeInput()
+{
+    WPE::LibinputServer::Client* inputClient = this;
+
+    if (std::getenv("WPE_AML_CURSOR")) {
+        cursor.reset(new Cursor(*this, width, height));
+        inputClient = cursor.get();
+        WPE::LibinputServer::singleton().setHandlePointerEvents(true);
+    }
+    WPE::LibinputServer::singleton().setPointerBounds(width, height);
+
+    WPE::LibinputServer::singleton().setClient(inputClient);
+}
+
+int ViewBackend::releaseClientFD()
+{
+
+    IPC::Message message;
+    IPC::AML::TargetConstruction::construct(message, width, height);
+    ipcHost.sendMessage(IPC::Message::data(message), IPC::Message::size);
+
+    return ipcHost.releaseClientFD();
+}
+
+void ViewBackend::handleFd(int)
+{
+}
+
+void ViewBackend::handleMessage(char* data, size_t size)
+{
+    if (size != IPC::Message::size)
+        return;
+
+    auto& message = IPC::Message::cast(data);
+    switch (message.messageCode) {
+    case IPC::AML::BufferCommit::code:
+    {
+        IPC::Message message;
+        IPC::AML::FrameComplete::construct(message);
+        ipcHost.sendMessage(IPC::Message::data(message), IPC::Message::size);
+
+        wpe_view_backend_dispatch_frame_displayed(backend);
+        break;
+    }
+    default:
+        fprintf(stderr, "ViewBackend: unhandled message\n");
+    }
+}
+
+void ViewBackend::handleKeyboardEvent(struct wpe_input_keyboard_event* event)
+{
+    wpe_view_backend_dispatch_keyboard_event(backend, event);
+}
+
+void ViewBackend::handlePointerEvent(struct wpe_input_pointer_event* event)
+{
+    wpe_view_backend_dispatch_pointer_event(backend, event);
+}
+
+void ViewBackend::handleAxisEvent(struct wpe_input_axis_event* event)
+{
+    wpe_view_backend_dispatch_axis_event(backend, event);
+}
+void ViewBackend::handleTouchEvent(struct wpe_input_touch_event* event)
+{
+    wpe_view_backend_dispatch_touch_event(backend, event);
+}
+
+ViewBackend::Cursor::Cursor(WPE::LibinputServer::Client& targetClient, uint32_t displayWidth, uint32_t displayHeight)
+    : targetClient(targetClient)
+    , position({ 0, 0 })
+    , displaySize({ displayWidth, displayHeight })
+{
+
+    ge2d_fd = open("/dev/ge2d", O_RDWR);
+    if (ge2d_fd < 0)
+    {
+        printf("[AML ViewBackend] Failed to open /dev/ge2d - cursor will be disabled.\n");
+        WPE::LibinputServer::singleton().setHandlePointerEvents(false);
+        return;
+    }
+
+    /* Initialize cursor memory from cursor-data
+       that will be blit to fb. */
+}
+
+ViewBackend::Cursor::~Cursor()
+{
+    // clear ge2d memory.
+    // TODO: also clear cursor memory.
+    if (ge2d_fd < 0) {
+        return;
+    }
+    close(ge2d_fd);
+}
+
+void ViewBackend::Cursor::handleKeyboardEvent(struct wpe_input_keyboard_event* event)
+{
+    targetClient.handleKeyboardEvent(event);
+}
+
+void ViewBackend::Cursor::handlePointerEvent(struct wpe_input_pointer_event* event)
+{
+    targetClient.handlePointerEvent(event);
+
+    // TODO: instead of using a rectangle, try
+    // blitting the cursor.
+    struct config_para_s config;
+    memset(&config, 0x00, sizeof(config));
+
+    config.src_dst_type = OSD0_OSD0;
+
+    int ret = ioctl(ge2d_fd, GE2D_CONFIG, &config);
+
+    // Perform a fill operation;
+    struct ge2d_para_s fillRectParam;
+    fillRectParam.src1_rect.x = event->x;
+    fillRectParam.src1_rect.y = event->y;
+    fillRectParam.src1_rect.w = std::min<uint32_t>(ViewBackend::Cursor::cursorWidth,  std::max<uint32_t>(0, displaySize.first - event->x));
+    fillRectParam.src1_rect.h = std::min<uint32_t>(ViewBackend::Cursor::cursorHeight, std::max<uint32_t>(0, displaySize.second - event->y));
+    fillRectParam.color = 0x0000ffff; // R G B A
+
+    ret = ioctl(ge2d_fd, GE2D_FILLRECTANGLE, &fillRectParam);
+}
+
+void ViewBackend::Cursor::handleAxisEvent(struct wpe_input_axis_event* event)
+{
+    targetClient.handleAxisEvent(event);
+}
+
+void ViewBackend::Cursor::handleTouchEvent(struct wpe_input_touch_event* event)
+{
+    targetClient.handleTouchEvent(event);
+}
+
+const uint32_t ViewBackend::Cursor::cursorWidth = 16;
+const uint32_t ViewBackend::Cursor::cursorHeight = 16;
+
+
+} // namespace AML
+
+extern "C" {
+
+struct wpe_view_backend_interface aml_view_backend_interface = {
+    // create
+    [](void*, struct wpe_view_backend* backend) -> void*
+    {
+        return new AML::ViewBackend(backend);
+    },
+    // destroy
+    [](void* data)
+    {
+        auto* backend = static_cast<AML::ViewBackend*>(data);
+        delete backend;
+    },
+    // initialize
+    [](void* data)
+    {
+        auto& backend = *static_cast<AML::ViewBackend*>(data);
+        backend.initialize();
+    },
+    // get_renderer_host_fd
+    [](void* data) -> int
+    {
+        auto& backend = *static_cast<AML::ViewBackend*>(data);
+        return backend.releaseClientFD();
+    },
+};
+
+}
diff --git a/src/input/Libinput/LibinputServer.h b/src/input/Libinput/LibinputServer.h
index 9eed054..2ba7684 100644
--- a/src/input/Libinput/LibinputServer.h
+++ b/src/input/Libinput/LibinputServer.h
@@ -29,6 +29,7 @@
 #define LibinputServer_h
 
 #include "KeyboardEventRepeating.h"
+#include <xkbcommon/xkbcommon.h>
 #include <glib.h>
 #include <array>
 #include <memory>
diff --git a/src/loader-impl.cpp b/src/loader-impl.cpp
index 7571daa..11155d8 100644
--- a/src/loader-impl.cpp
+++ b/src/loader-impl.cpp
@@ -41,6 +41,9 @@
 #ifdef BACKEND_BCM_RPI
 #include "bcm-rpi/interfaces.h"
 #endif
+#ifdef BACKEND_AML
+#include "amlogic/interfaces.h"
+#endif
 
 #ifdef BACKEND_INTELCE
 #include "intelce/interfaces.h"
@@ -200,6 +203,17 @@ struct wpe_loader_interface _wpe_loader_interface = {
             return &essos_view_backend_interface;
 #endif
 
+#ifdef BACKEND_AML
+        if (!std::strcmp(object_name, "_wpe_renderer_backend_egl_interface"))
+            return &aml_renderer_backend_egl_interface;
+        if (!std::strcmp(object_name, "_wpe_renderer_backend_egl_target_interface"))
+            return &aml_renderer_backend_egl_target_interface;
+        if (!std::strcmp(object_name, "_wpe_renderer_backend_egl_offscreen_target_interface"))
+            return &aml_renderer_backend_egl_offscreen_target_interface;
+
+        if (!std::strcmp(object_name, "_wpe_view_backend_interface"))
+            return &aml_view_backend_interface;
+#endif
         return nullptr;
     },
 };
